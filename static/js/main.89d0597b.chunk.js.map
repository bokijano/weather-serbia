{"version":3,"sources":["temperature icons/snow.svg","components/Current Temperature/serbia.png","temperature icons/clear-day.svg","temperature icons/partly-cloudy-day.svg","temperature icons/clear-night.svg","temperature icons/cloudy.svg","temperature icons/partly-cloudy-night.svg","temperature icons/fog.svg","temperature icons/rain.svg","temperature icons/sleet.svg","components/Navbar.js","components/Current Temperature/CurrentTemperature.js","components/Daily Temperature/DailyTemperature.js","components/Long Term Temperature/LongTermTemperature.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","Component","CurrentTemperature","lat","long","temp","icons","cityID","arr","this","props","cities","getIcon","api","proxy","API_KEY","fetch","data","json","jsonData","currently","temperature","icon","temperatureC","toFixed","cityName","result","document","querySelector","innerHTML","getElementById","textContent","iconSrc","console","log","_context","t0","getTemperatures","src","SerbiaMap","alt","DailyTemperature","state","forecastItem","convertUnix","daily","temperatureMin","temperatureMax","time","tempMin","tempMax","iconImg","date","t1","LongTermTemperature","getForecastIcon","_this","toCelsius","time1","minTemp","maxTemp","icon1","iconImg1","time2","minTemp2","maxTemp2","icon2","iconImg2","time3","minTemp3","maxTemp3","icon3","iconImg3","App","clearday","partlycloudyday","clearnight","partlycloudynight","cloudy","fog","sleet","snow","wind","rain","unixTime","Date","year","getFullYear","month","getMonth","day","getDate","getDay","degree","Fragment","Navbar_Navbar","DailyTemperature_DailyTemperature","CurrentTemperature_CurrentTemperature","LongTermTemperature_LongTermTemperature","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89d0597b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snow.492aef11.svg\";","module.exports = __webpack_public_path__ + \"static/media/serbia.82ff3005.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-day.4b42731b.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-day.83043161.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night.8c244a47.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.33883103.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-night.73cce30d.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.01bcb6c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.5d44f040.svg\";","module.exports = __webpack_public_path__ + \"static/media/sleet.a0d9e9ae.svg\";","import React, { Component } from \"react\";\r\n\r\nexport default class Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar\">\r\n        <h2>Weather Forecast for Serbia</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport SerbiaMap from \"./serbia.png\";\r\nimport \"./CurrentTemperature.css\";\r\n\r\nexport default class CurrentTemperature extends Component {\r\n  async getTemperatures(lat, long, temp, icons, cityID, arr) {\r\n    try {\r\n      const { cities, getIcon } = this.props;\r\n\r\n      const api = `${this.props.proxy}https://api.darksky.net/forecast/${this.props.API_KEY}/${lat},${long}`;\r\n      const data = await fetch(api);\r\n      const jsonData = await data.json();\r\n\r\n      const { temperature, icon } = jsonData.currently;\r\n\r\n      let temperatureC = (((temperature - 32) * 5) / 9).toFixed(0);\r\n\r\n      let cityName = cities[arr];\r\n      let id = cityID;\r\n\r\n      let result = `\r\n      \r\n      <li id=\"${id}\" class=\"city-pos\"'>\r\n        <h4>${cityName}</h4>\r\n        <div class=\"temperature-content\">\r\n          <img id=${icons} src=\"\" alt=\"\" />\r\n          <h3 id=${temp} class=\"temperature-degree\">35</h3>\r\n          <span>C</span>\r\n        </div>\r\n      </li>\r\n         `;\r\n\r\n      document.querySelector(\".list-content\").innerHTML += result;\r\n      document.getElementById(temp).textContent = temperatureC;\r\n\r\n      let iconSrc = document.getElementById(icons);\r\n\r\n      getIcon(icon, iconSrc);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.getTemperatures(\r\n      43.15306,\r\n      22.58611,\r\n      \"temPirot\",\r\n      \"iconPirot\",\r\n      \"pirot\",\r\n      0\r\n    );\r\n    this.getTemperatures(43.32472, 21.90333, \"temNis\", \"iconNis\", \"nis\", 1);\r\n    this.getTemperatures(\r\n      43.85861,\r\n      19.84878,\r\n      \"temUzice\",\r\n      \"iconUzice\",\r\n      \"uzice\",\r\n      2\r\n    );\r\n    this.getTemperatures(\r\n      44.01667,\r\n      20.91667,\r\n      \"temKragujevac\",\r\n      \"iconKragujevac\",\r\n      \"kragujevac\",\r\n      3\r\n    );\r\n    this.getTemperatures(\r\n      43.90358,\r\n      22.26405,\r\n      \"temZajecar\",\r\n      \"iconZajecar\",\r\n      \"zajecar\",\r\n      4\r\n    );\r\n    this.getTemperatures(\r\n      44.62133,\r\n      21.18782,\r\n      \"temPozarevac\",\r\n      \"iconPozarevac\",\r\n      \"pozarevac\",\r\n      5\r\n    );\r\n    this.getTemperatures(\r\n      44.80401,\r\n      20.46513,\r\n      \"temBeograd\",\r\n      \"iconBeograd\",\r\n      \"beograd\",\r\n      6\r\n    );\r\n    this.getTemperatures(\r\n      45.25167,\r\n      19.83694,\r\n      \"temNoviSad\",\r\n      \"iconNoviSad\",\r\n      \"novi-sad\",\r\n      7\r\n    );\r\n    this.getTemperatures(\r\n      46.1,\r\n      19.66667,\r\n      \"temSubotica\",\r\n      \"iconSubotica\",\r\n      \"subotica\",\r\n      8\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // map with 9 cities and it's temperature\r\n      <div className=\"map-content\">\r\n        <img className=\"img-pos\" src={SerbiaMap} alt=\"serbia map\" />\r\n        <ul className=\"list-content\"></ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./DailyTemperature.css\";\r\n\r\nexport default class DailyTemperature extends Component {\r\n  state = {};\r\n  async getTemperatures(lat, long, arr) {\r\n    try {\r\n      const { proxy, API_KEY, cities, forecastItem, convertUnix } = this.props;\r\n\r\n      const api = `${proxy}https://api.darksky.net/forecast/${API_KEY}/${lat},${long}`;\r\n      const data = await fetch(api);\r\n      const jsonData = await data.json();\r\n\r\n      const {\r\n        temperatureMin,\r\n        temperatureMax,\r\n        icon,\r\n        time\r\n      } = jsonData.daily.data[0];\r\n\r\n      let tempMin = (((temperatureMin - 32) * 5) / 9).toFixed(0);\r\n      let tempMax = (((temperatureMax - 32) * 5) / 9).toFixed(0);\r\n\r\n      let cityName = cities[arr];\r\n\r\n      let iconImg = \"\";\r\n\r\n      switch (icon) {\r\n        case \"clear-day\":\r\n          iconImg = forecastItem[0];\r\n          break;\r\n        case \"clear-night\":\r\n          iconImg = forecastItem[2];\r\n          break;\r\n        case \"partly-cloudy-day\":\r\n          iconImg = forecastItem[1];\r\n          break;\r\n        case \"partly-cloudy-night\":\r\n          iconImg = forecastItem[3];\r\n          break;\r\n        case \"cloudy\":\r\n          iconImg = forecastItem[4];\r\n          break;\r\n        case \"rain\":\r\n          iconImg = forecastItem[9];\r\n          break;\r\n        case \"sleet\":\r\n          iconImg = forecastItem[6];\r\n          break;\r\n        case \"snow\":\r\n          iconImg = forecastItem[7];\r\n          break;\r\n        case \"wind\":\r\n          iconImg = forecastItem[8];\r\n          break;\r\n        case \"fog\":\r\n          iconImg = forecastItem[5];\r\n          break;\r\n      }\r\n\r\n      let date = convertUnix(time);\r\n\r\n      let result = `\r\n      <div class=\"curr-city\">\r\n       <h2 class=\"city-name\">${cityName}\r\n        <span class=\"fa fa-angle-double-right\"></span>\r\n       </h2>\r\n       <img id=\"temp-icon\" src=${iconImg} alt=\"no picture\" />\r\n       <h5 class=\"maxTemp\"><span id=\"max\">${tempMax} C</span><span id=\"text\">MAX</span></h5>\r\n       <h5 class=\"minTemp\"><span id=\"min\">${tempMin} C</span><span id=\"text\">MIN</span></h5>\r\n      </div> \r\n      `;\r\n      document.querySelector(\".current-temperatures\").innerHTML += result;\r\n\r\n      document.querySelector(\".currDate\").innerHTML = date;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.getTemperatures(43.15306, 22.58611, 0);\r\n    this.getTemperatures(43.32472, 21.90333, 1);\r\n    this.getTemperatures(43.85861, 19.84878, 2);\r\n    this.getTemperatures(44.01667, 20.91667, 3);\r\n    this.getTemperatures(43.90358, 22.26405, 4);\r\n    this.getTemperatures(44.62133, 21.18782, 5);\r\n    this.getTemperatures(44.80401, 20.46513, 6);\r\n    this.getTemperatures(45.25167, 19.83694, 7);\r\n    this.getTemperatures(46.1, 19.66667, 8);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"current-temperatures\">\r\n        <h2 className=\"currDate\"></h2>\r\n        <hr></hr>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./LongTermTemperature.css\";\r\n\r\nexport default class LongTermTemperature extends Component {\r\n  async getTemperatures(lat, long, arr, icons) {\r\n    try {\r\n      const {\r\n        proxy,\r\n        API_KEY,\r\n        cities,\r\n        getIcon,\r\n        convertUnix,\r\n        toCelsius,\r\n        forecastItem\r\n      } = this.props;\r\n\r\n      const api = `${proxy}https://api.darksky.net/forecast/${API_KEY}/${lat},${long}`;\r\n      const data = await fetch(api);\r\n      const jsonData = await data.json();\r\n      console.log(jsonData);\r\n\r\n      //forecast for tomorow\r\n      const time1 = jsonData.daily.data[1].time;\r\n      document.querySelector(\".dayFirst\").textContent = convertUnix(time1);\r\n      const minTemp = toCelsius(jsonData.daily.data[1].temperatureMin);\r\n      const maxTemp = toCelsius(jsonData.daily.data[1].temperatureMax);\r\n      const icon1 = jsonData.daily.data[1].icon;\r\n      console.log(icon1);\r\n      let iconImg1 = this.getForecastIcon(icon1);\r\n\r\n      //forecast for day after tomorow\r\n      const time2 = jsonData.daily.data[2].time;\r\n      document.querySelector(\".daySecond\").textContent = convertUnix(time2);\r\n      const minTemp2 = toCelsius(jsonData.daily.data[2].temperatureMin);\r\n      const maxTemp2 = toCelsius(jsonData.daily.data[2].temperatureMax);\r\n      const icon2 = jsonData.daily.data[2].icon;\r\n      let iconImg2 = this.getForecastIcon(icon2);\r\n\r\n      //forecast for second day after tomorow\r\n      const time3 = jsonData.daily.data[3].time;\r\n      document.querySelector(\".dayThird\").textContent = convertUnix(time3);\r\n      const minTemp3 = toCelsius(jsonData.daily.data[3].temperatureMin);\r\n      const maxTemp3 = toCelsius(jsonData.daily.data[3].temperatureMax);\r\n      const icon3 = jsonData.daily.data[3].icon;\r\n      let iconImg3 = this.getForecastIcon(icon3);\r\n\r\n      const cityName = cities[arr];\r\n\r\n      let result = `\r\n        <div class=\"long-city\">\r\n          <h4 class=\"city-name\">${cityName}</h4>\r\n\r\n          <div class=\"longForecast\">\r\n           <hr>\r\n           <div class=\"firstDay\">\r\n             <img class=\"first\" id=\"temp-icon\" src=${iconImg1} alt=\"no picture\" />\r\n             <div class=\"forecastFirst\">\r\n               <h5 class=\"maxTemp\">\r\n                 <span id=\"max\">${maxTemp} C</span>\r\n                 <span id=\"text\">max</span> \r\n               </h5>\r\n               <h5 class=\"minTemp\">\r\n                 <span id=\"min\">${minTemp} C</span>\r\n                 <span id=\"minText\">min</span>                   \r\n               </h5>\r\n             </div>\r\n           </div>\r\n           <hr>\r\n\r\n           <div class=\"secondDay\">\r\n           <img id=\"temp-icon\" src=${iconImg2} alt=\"no picture\" />\r\n           <div class=\"forecastFirst\">\r\n             <h5 class=\"maxTemp\">\r\n               <span id=\"max\">${maxTemp2} C</span>\r\n               <span id=\"text\">max</span> \r\n             </h5>\r\n             <h5 class=\"minTemp\">\r\n               <span id=\"min\">${minTemp2} C</span>\r\n               <span id=\"minText\">min</span>                   \r\n             </h5>\r\n           </div>\r\n         </div>\r\n         <hr>\r\n\r\n         <div class=\"thirdDay\">\r\n         <img id=\"temp-icon\" src=${iconImg3} alt=\"no picture\" />\r\n         <div class=\"forecastFirst\">\r\n           <h5 class=\"maxTemp\">\r\n             <span id=\"max\">${maxTemp3} C</span>\r\n             <span id=\"text\">max</span> \r\n           </h5>\r\n           <h5 class=\"minTemp\">\r\n             <span id=\"min\">${minTemp3} C</span>\r\n             <span id=\"minText\">min</span>                   \r\n           </h5>\r\n         </div>\r\n       </div>\r\n       <hr>\r\n      </div>\r\n    </div>\r\n      `;\r\n\r\n      document.querySelector(\".long-temperature\").innerHTML += result;\r\n\r\n      let icons = document.getElementById(\"temp-icon\");\r\n      console.log(icons);\r\n      getIcon(icon1, icons);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.getTemperatures(43.15306, 22.58611, 0);\r\n    this.getTemperatures(43.32472, 21.90333, 1);\r\n    this.getTemperatures(43.85861, 19.84878, 2);\r\n    this.getTemperatures(44.01667, 20.91667, 3);\r\n    this.getTemperatures(43.90358, 22.26405, 4);\r\n    this.getTemperatures(44.62133, 21.18782, 5);\r\n    this.getTemperatures(44.80401, 20.46513, 6);\r\n    this.getTemperatures(45.25167, 19.83694, 7);\r\n    this.getTemperatures(46.1, 19.66667, 8);\r\n  }\r\n  getForecastIcon = icon => {\r\n    switch (icon) {\r\n      case \"clear-day\":\r\n        return this.props.forecastItem[0];\r\n        break;\r\n      case \"clear-night\":\r\n        return this.props.forecastItem[2];\r\n        break;\r\n      case \"partly-cloudy-day\":\r\n        return this.props.forecastItem[1];\r\n        break;\r\n      case \"partly-cloudy-night\":\r\n        return this.props.forecastItem[3];\r\n        break;\r\n      case \"cloudy\":\r\n        return this.props.forecastItem[4];\r\n        break;\r\n      case \"rain\":\r\n        return this.props.forecastItem[9];\r\n        break;\r\n      case \"sleet\":\r\n        return this.props.forecastItem[6];\r\n        break;\r\n      case \"snow\":\r\n        return this.props.forecastItem[7];\r\n        break;\r\n      case \"wind\":\r\n        return this.props.forecastItem[8];\r\n        break;\r\n      case \"fog\":\r\n        return this.props.forecastItem[5];\r\n        break;\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"long-temperature\">\r\n        <div className=\"long-temp\">\r\n          <hr></hr>\r\n          <h4 className=\"dayFirst\">27</h4>\r\n          <hr></hr>\r\n          <h4 className=\"daySecond\">28</h4>\r\n          <hr></hr>\r\n          <h4 className=\"dayThird\">28</h4>\r\n          <hr></hr>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./forecast.css\";\nimport Navbar from \"./components/Navbar.js\";\nimport CurrentTemperature from \"./components/Current Temperature/CurrentTemperature.js\";\nimport DailyTemperature from \"./components/Daily Temperature/DailyTemperature.js\";\nimport LongTermTemperature from \"./components/Long Term Temperature/LongTermTemperature.js\";\nimport clearday from \"./temperature icons/clear-day.svg\";\nimport partlycloudyday from \"./temperature icons/partly-cloudy-day.svg\";\nimport clearnight from \"./temperature icons/clear-night.svg\";\nimport cloudy from \"./temperature icons/cloudy.svg\";\nimport partlycloudynight from \"./temperature icons/partly-cloudy-night.svg\";\nimport fog from \"./temperature icons/fog.svg\";\nimport rain from \"./temperature icons/rain.svg\";\nimport sleet from \"./temperature icons/sleet.svg\";\nimport snow from \"./temperature icons/snow.svg\";\nimport wind from \"./temperature icons/snow.svg\";\n\nclass App extends Component {\n  state = {\n    cities: [\n      \"Pirot\",\n      \"Niš\",\n      \"Užice\",\n      \"Kragujevac\",\n      \"Zaječar\",\n      \"Požarevac\",\n      \"Beograd\",\n      \"Novi Sad\",\n      \"Subotica\"\n    ],\n    forecastItem: [\n      clearday,\n      partlycloudyday,\n      clearnight,\n      partlycloudynight,\n      cloudy,\n      fog,\n      sleet,\n      snow,\n      wind,\n      rain\n    ],\n    proxy: \"http://cors-anywhere.herokuapp.com/\",\n    API_KEY: \"fb4c116f915c61742654d62a921fffa2\"\n  };\n\n  convertUnix = unixTime => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"Oktober\",\n      \"November\",\n      \"December\"\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n\n    let date = new Date(unixTime * 1000);\n    let year = date.getFullYear();\n    let month = months[date.getMonth()];\n    let day = date.getDate();\n    let dayOfWeek = days[date.getDay()];\n\n    let currentDate = dayOfWeek + \" \" + day + \". \" + month + \" \" + year + \".\";\n    return currentDate;\n  };\n\n  getIcon = (icon, iconImg) => {\n    switch (icon) {\n      case \"clear-day\":\n        iconImg.src = this.state.forecastItem[0];\n        break;\n      case \"clear-night\":\n        iconImg.src = this.state.forecastItem[2];\n        break;\n      case \"partly-cloudy-day\":\n        iconImg.src = this.state.forecastItem[1];\n        break;\n      case \"partly-cloudy-night\":\n        iconImg.src = this.state.forecastItem[3];\n        break;\n      case \"cloudy\":\n        iconImg.src = this.state.forecastItem[4];\n        break;\n      case \"rain\":\n        iconImg.src = this.state.forecastItem[9];\n        break;\n      case \"sleet\":\n        iconImg.src = this.state.forecastItem[6];\n        break;\n      case \"snow\":\n        iconImg.src = this.state.forecastItem[7];\n        break;\n      case \"wind\":\n        iconImg.src = this.state.forecastItem[8];\n        break;\n      case \"fog\":\n        iconImg.src = this.state.forecastItem[5];\n        break;\n    }\n  };\n\n  toCelsius(degree) {\n    let toCelsius = (((degree - 32) * 5) / 9).toFixed(0);\n    return toCelsius;\n  }\n\n  async getTemperatures(lat, long) {\n    try {\n      const api = `${this.state.proxy}https://api.darksky.net/forecast/${this.state.API_KEY}/${lat},${long}`;\n      const data = await fetch(api);\n      const jsonData = await data.json();\n      console.log(jsonData);\n\n      const { temperature, icon, time } = jsonData.currently;\n\n      console.log(this.convertUnix(time));\n\n      console.log(temperature, icon);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  componentDidMount() {\n    this.getTemperatures(43.15306, 22.58611);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div className=\"weather-container\">\n          <DailyTemperature\n            proxy={this.state.proxy}\n            API_KEY={this.state.API_KEY}\n            cities={this.state.cities}\n            getIcon={this.getIcon}\n            forecastItem={this.state.forecastItem}\n            convertUnix={this.convertUnix}\n          />\n          <CurrentTemperature\n            proxy={this.state.proxy}\n            API_KEY={this.state.API_KEY}\n            cities={this.state.cities}\n            getIcon={this.getIcon}\n          />\n          <LongTermTemperature\n            proxy={this.state.proxy}\n            API_KEY={this.state.API_KEY}\n            cities={this.state.cities}\n            getIcon={this.getIcon}\n            forecastItem={this.state.forecastItem}\n            convertUnix={this.convertUnix}\n            toCelsius={this.toCelsius}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}