{"version":3,"sources":["temperature icons/partly-cloudy-day.svg","temperature icons/snow.svg","components/Current Temperature/serbia.png","temperature icons/clear-day.svg","temperature icons/clear-night.svg","temperature icons/cloudy.svg","temperature icons/fog.svg","temperature icons/rain.svg","temperature icons/sleet.svg","components/Navbar.js","components/Current Temperature/CurrentTemperature.js","components/Daily Temperature/DailyTemperature.js","components/Long Term Temperature/LongTermTemperature.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","react_default","a","createElement","className","Component","CurrentTemperature","lat","long","temp","icons","api","this","props","proxy","API_KEY","fetch","data","json","jsonData","console","log","currently","temperature","icon","temperatureC","toFixed","document","getElementById","textContent","result","innerHTML","_context","t0","getTemperatures","src","SerbiaMap","alt","DailyTemperature","state","arr","cities","forecastItem","convertUnix","daily","temperatureMin","temperatureMax","time","tempMin","tempMax","cityName","iconImg","date","querySelector","t1","LongTermTemperature","App","clearday","partlycloudyday","clearnight","partlycloudynight","cloudy","fog","sleet","snow","wind","rain","unixTime","Date","year","getFullYear","month","getMonth","day","getDate","getDay","Fragment","Navbar_Navbar","DailyTemperature_DailyTemperature","CurrentTemperature_CurrentTemperature","LongTermTemperature_LongTermTemperature","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4a95c3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-day.83043161.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.492aef11.svg\";","module.exports = __webpack_public_path__ + \"static/media/serbia.82ff3005.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-day.4b42731b.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night.8c244a47.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.33883103.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.01bcb6c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.5d44f040.svg\";","module.exports = __webpack_public_path__ + \"static/media/sleet.a0d9e9ae.svg\";","import React, { Component } from \"react\";\r\n\r\nexport default class Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar\">\r\n        <i className=\"fas fa-bolt\"></i>\r\n        <i className=\"fas fa-cloud-sun\"></i>\r\n        <i className=\"fas fa-cloud-showers-heavy\"></i>\r\n        <h2>Weather Forecast for Serbia</h2>\r\n        <i className=\"fas fa-cloud-rain\"></i>\r\n        <i className=\"fas fa-sun\"></i>\r\n        <i className=\"fas fa-cloud-moon\"></i>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport SerbiaMap from \"./serbia.png\";\r\nimport \"./CurrentTemperature.css\";\r\n\r\nexport default class CurrentTemperature extends Component {\r\n  async getTemperatures(lat, long, temp, icons) {\r\n    try {\r\n      const api = `${this.props.proxy}https://api.darksky.net/forecast/${this.props.API_KEY}/${lat},${long}`;\r\n      const data = await fetch(api);\r\n      const jsonData = await data.json();\r\n      console.log(jsonData);\r\n\r\n      const { temperature, icon } = jsonData.currently;\r\n\r\n      let temperatureC = (((temperature - 32) * 5) / 9).toFixed(0);\r\n\r\n      document.getElementById(temp).textContent = temperatureC;\r\n\r\n      let result = `<img src=\"./../temperature icons/${icon}.svg\" alt=\"no picture\" />`;\r\n\r\n      document.getElementById(icons).innerHTML = result;\r\n      console.log(document.getElementById(icons));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.getTemperatures(43.15306, 22.58611, \"temPirot\", \"iconPirot\");\r\n    this.getTemperatures(43.32472, 21.90333, \"temNis\", \"iconNis\");\r\n    this.getTemperatures(43.85861, 19.84878, \"temUzice\", \"iconUzice\");\r\n    this.getTemperatures(44.01667, 20.91667, \"temKragujevac\", \"iconKragujevac\");\r\n    this.getTemperatures(43.90358, 22.26405, \"temZajecar\", \"iconZajecar\");\r\n    this.getTemperatures(44.62133, 21.18782, \"temPozarevac\", \"iconPozarevac\");\r\n    this.getTemperatures(44.80401, 20.46513, \"temBeograd\", \"iconBeograd\");\r\n    this.getTemperatures(45.25167, 19.83694, \"temNoviSad\", \"iconNoviSad\");\r\n    this.getTemperatures(46.1, 19.66667, \"temSubotica\", \"iconSubotica\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // map with 9 cities and it's temperature\r\n      <div className=\"map-content\">\r\n        <img className=\"img-pos\" src={SerbiaMap} alt=\"serbia map\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./DailyTemperature.css\";\r\n\r\nexport default class DailyTemperature extends Component {\r\n  state = {};\r\n  async getTemperatures(lat, long, arr) {\r\n    try {\r\n      const { proxy, API_KEY, cities, forecastItem, convertUnix } = this.props;\r\n\r\n      const api = `${proxy}https://api.darksky.net/forecast/${API_KEY}/${lat},${long}`;\r\n      const data = await fetch(api);\r\n      const jsonData = await data.json();\r\n\r\n      const {\r\n        temperatureMin,\r\n        temperatureMax,\r\n        icon,\r\n        time\r\n      } = jsonData.daily.data[0];\r\n\r\n      let tempMin = (((temperatureMin - 32) * 5) / 9).toFixed(0);\r\n      let tempMax = (((temperatureMax - 32) * 5) / 9).toFixed(0);\r\n\r\n      let cityName = cities[arr];\r\n\r\n      let iconImg = \"\";\r\n\r\n      switch (icon) {\r\n        case \"clear-day\":\r\n          iconImg = forecastItem[0];\r\n          break;\r\n        case \"clear-night\":\r\n          iconImg = forecastItem[2];\r\n          break;\r\n        case \"partly-cloudy-day\":\r\n          iconImg = forecastItem[1];\r\n          break;\r\n        case \"partly-cloudy-night\":\r\n          iconImg = forecastItem[3];\r\n          break;\r\n        case \"cloudy\":\r\n          iconImg = forecastItem[4];\r\n          break;\r\n        case \"rain\":\r\n          iconImg = forecastItem[9];\r\n          break;\r\n        case \"sleet\":\r\n          iconImg = forecastItem[6];\r\n          break;\r\n        case \"snow\":\r\n          iconImg = forecastItem[7];\r\n          break;\r\n        case \"wind\":\r\n          iconImg = forecastItem[8];\r\n          break;\r\n        case \"fog\":\r\n          iconImg = forecastItem[5];\r\n          break;\r\n      }\r\n\r\n      let date = convertUnix(time);\r\n\r\n      let result = `\r\n      <div class=\"curr-city\">\r\n       <h2 class=\"city-name\">${cityName}\r\n        <span class=\"fa fa-angle-double-right\"></span>\r\n       </h2>\r\n       <img id=\"temp-icon\" src=${iconImg} alt=\"no picture\" />\r\n       <h5 class=\"maxTemp\"><span id=\"max\">${tempMax} C</span><span id=\"text\">MAX</span></h5>\r\n       <h5 class=\"minTemp\"><span id=\"min\">${tempMin} C</span><span id=\"text\">MIN</span></h5>\r\n      </div> \r\n      `;\r\n      document.querySelector(\".current-temperatures\").innerHTML += result;\r\n\r\n      document.querySelector(\".currDate\").innerHTML = date;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.getTemperatures(43.15306, 22.58611, 0);\r\n    this.getTemperatures(43.32472, 21.90333, 1);\r\n    this.getTemperatures(43.85861, 19.84878, 2);\r\n    this.getTemperatures(44.01667, 20.91667, 3);\r\n    this.getTemperatures(43.90358, 22.26405, 4);\r\n    this.getTemperatures(44.62133, 21.18782, 5);\r\n    this.getTemperatures(44.80401, 20.46513, 6);\r\n    this.getTemperatures(45.25167, 19.83694, 7);\r\n    this.getTemperatures(46.1, 19.66667, 8);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"current-temperatures\">\r\n        <h2 className=\"currDate\"></h2>\r\n        <hr></hr>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./LongTermTemperature.css\";\r\n\r\nexport default class LongTermTemperature extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"long-temperature\">\r\n        <div className=\"long-temp\">\r\n          <hr></hr>\r\n          <h4 className=\"dayFirst\">27</h4>\r\n          <hr></hr>\r\n          <h4 className=\"daySecond\">28</h4>\r\n          <hr></hr>\r\n          <h4 className=\"dayThird\">28</h4>\r\n          <hr></hr>\r\n        </div>\r\n        <p>This is long term temperature component</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./forecast.css\";\nimport Navbar from \"./components/Navbar.js\";\nimport CurrentTemperature from \"./components/Current Temperature/CurrentTemperature.js\";\nimport DailyTemperature from \"./components/Daily Temperature/DailyTemperature.js\";\nimport LongTermTemperature from \"./components/Long Term Temperature/LongTermTemperature.js\";\nimport clearday from \"./temperature icons/clear-day.svg\";\nimport partlycloudyday from \"./temperature icons/partly-cloudy-day.svg\";\nimport clearnight from \"./temperature icons/clear-night.svg\";\nimport cloudy from \"./temperature icons/cloudy.svg\";\nimport partlycloudynight from \"./temperature icons/partly-cloudy-day.svg\";\nimport fog from \"./temperature icons/fog.svg\";\nimport rain from \"./temperature icons/rain.svg\";\nimport sleet from \"./temperature icons/sleet.svg\";\nimport snow from \"./temperature icons/snow.svg\";\nimport wind from \"./temperature icons/snow.svg\";\n\nclass App extends Component {\n  state = {\n    cities: [\n      \"Pirot\",\n      \"Niš\",\n      \"Užice\",\n      \"Kragujevac\",\n      \"Zaječar\",\n      \"Požarevac\",\n      \"Beograd\",\n      \"Novi Sad\",\n      \"Subotica\"\n    ],\n    forecastItem: [\n      clearday,\n      partlycloudyday,\n      clearnight,\n      partlycloudynight,\n      cloudy,\n      fog,\n      sleet,\n      snow,\n      wind,\n      rain\n    ],\n    proxy: \"http://cors-anywhere.herokuapp.com/\",\n    API_KEY: \"fb4c116f915c61742654d62a921fffa2\"\n  };\n\n  convertUnix = unixTime => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"Oktober\",\n      \"November\",\n      \"December\"\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n\n    let date = new Date(unixTime * 1000);\n    let year = date.getFullYear();\n    let month = months[date.getMonth()];\n    let day = date.getDate();\n    let dayOfWeek = days[date.getDay()];\n\n    let currentDate = dayOfWeek + \" \" + day + \". \" + month + \" \" + year + \".\";\n    return currentDate;\n  };\n\n  async getTemperatures(lat, long) {\n    try {\n      const api = `${this.state.proxy}https://api.darksky.net/forecast/${this.state.API_KEY}/${lat},${long}`;\n      const data = await fetch(api);\n      const jsonData = await data.json();\n      console.log(jsonData);\n\n      const { temperature, icon, time } = jsonData.currently;\n\n      console.log(this.convertUnix(time));\n\n      console.log(temperature, icon);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  componentDidMount() {\n    this.getTemperatures(43.15306, 22.58611);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div className=\"weather-container\">\n          <DailyTemperature\n            proxy={this.state.proxy}\n            API_KEY={this.state.API_KEY}\n            cities={this.state.cities}\n            forecastItem={this.state.forecastItem}\n            convertUnix={this.convertUnix}\n          />\n          <CurrentTemperature\n            proxy={this.state.proxy}\n            API_KEY={this.state.API_KEY}\n          />\n          <LongTermTemperature />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}